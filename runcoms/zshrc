if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# source /Users/raine/.zshsecrets

export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8

fpath=( ~/.zfunc "${fpath[@]}" )
autoload -Uz `ls ~/.zfunc`

setopt interactivecomments

alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'
alias -g H="| head"
alias -g T="| tail"
alias -g C="| wc -l"
alias -g L="| less -F"
alias -g LC="--color | less -F"
alias -g G="| ag"
alias -g S="| sed -e"
alias -g A="| awk"
alias -g J="| jq ."
alias -g PP="| pygmentize -g | less -F"
alias -g Y="| pbcopy"
alias -g F="| fzf"
alias -g P="| peco"
alias -g B="| bunyan"
alias -g BL="| bunyan --color | less -F"
alias vim="mvim -v"
alias svim="sudo mvim -v"
alias v="vim"
alias irc="mosh -p 9601:9620 atomi -- screen -rd irc"
alias json="python -mjson.tool"
alias jt="json"
alias lcc='fc -ln -1 | awk "{\$1=\$1}1" ORS="" | pbcopy' # copy last command
alias goog="google"
alias t="teamocil"
alias th="teamocil --here"
alias ccat="pygmentize -g"
cless() { pygmentize -g $1 | less -F }
alias pbedit="pbpaste | vipe | pbcopy"

alias ni="npm install"
alias nisd="npm install --save-dev"
alias nis="npm install --save"
alias nig="npm install -g"

alias noderepl="node ~/noderepl/myrepl.js"
alias now='date -u +"%Y-%m-%dT%H:%M:%SZ"'

alias buh="grep --line-buffered --color=none 'app\[web.\d\+\]' | sed -l 's/.*app\[web\..*\]\: //' | bunyan"
alias bunyan-ls='jq -r -c '\''del(.tags,.path,.logstash_origin,."@timestamp",."@version")'\'' | bunyan'
alias bun="R -c 'omit <[ tags path logstash_origin @version ]>' | bunyan -o short"

alias jks="jenkins"

alias dm="docker-machine"
alias dli="docker images -q | head -n1"
alias dlc="docker ps -q | head -n1"
alias dri="docker run -it --rm"

alias R='ramda id'
alias ram='replem ramda:R!'

alias shiba=/Applications/Shiba.app/Contents/MacOS/Shiba

json-flat-table() { R identity -o table "$@" | less }

# align graphite raw output
alias align="tr '|' , | cut -d',' -f1,5- | sed 's/\\.0//g' | column -t -s,"

c() {
  git commit -m "$*"
}

gist-clone() {
  gist_id=`echo "$1" | sed -e 's/.*\///g'`
  git clone git@gist.github.com:/$gist_id.git $2
}

npm-bin-path() {
  echo "adding `npm bin` to path"
  export PATH=$(npm bin):$PATH
  echo $PATH
}

debug() {
  export DEBUG=*
}

alias nodebug="unset DEBUG"

mcd() { mkdir $1 && cd $1; }

git-ignore() {
  echo $1 >>! .gitignore
}

eval "$(hub alias -s)"
# eval "`npm completion`"
# eval "$(gulp --completion=zsh)"
# compctl -g '~/.teamocil/*(:t:r)' teamocil

fasd_cache="$HOME/.fasd-init-bash"
if [ "$(command -v fasd)" -nt "$fasd_cache" -o ! -s "$fasd_cache" ]; then
  fasd --init auto >| "$fasd_cache"
fi
source "$fasd_cache"
unset fasd_cache

alias j='fasd_cd -d'     # cd, same functionality as j in autojump
alias jj='fasd_cd -d -i' # cd with interactive selection
alias v='f -e "mvim -v"' # quick opening files with vim
alias o='a -e open'      # quick opening files with xdg-open

function restart-audio; {
  sudo kill `ps -ax | grep 'coreaudiod' | grep 'sbin' | awk '{print $1}'`
}

function curlj {
  curl -s "$@" | jt
}

# URL encode something and print it.
function url-encode; {
  setopt extendedglob
  echo "${${(j: :)@}//(#b)(?)/%$[[##16]##${match[1]}]}"
}

# Search google for the given keywords.
function google; {
  open "http://www.google.com/search?q=`url-encode "${(j: :)@}"`"
}

jscat() {
  < $1 | js-beautify -s 2 -f - | pygmentize -g | less -F
}

function trim-empty; {
  convert "$1" -fuzz "1%" -trim +repage "$1"
}

function parse-date; {
  node -e "console.log(new Date($1))"
}

function parse-unixtime; {
  node -e "console.log(require('moment').unix($1).toString())"
}

alias unixtime='date "+%s"'

# Change directory to the current Finder directory
cdf() {
  target=`osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)'`
  if [ "$target" != "" ]; then
    cd "$target"; pwd
  else
    echo 'No Finder window found' >&2
  fi
}

botch() {
  printf '\e[?25l'
  while true; do
    (echo -en '\033[H'
      CMD="$@"
      bash -c "$CMD" | while read LINE; do
        echo -n "$LINE"
        echo -e '\033[0K'
      done
      echo -en '\033[J') | tac | tac
    sleep 2
  done
}

# run something in a directory and go back
indir() { (cd "$1" && shift && eval "$@"); }

PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
PATH=$PATH:$HOME/bin
PATH=$PATH:"/usr/local/heroku/bin"
PATH=$HOME/.cabal/bin:$PATH

source /Users/raine/.zsh/zaw/zaw.zsh
bindkey '^X' zaw
bindkey '^R' zaw-history
bindkey -M filterselect '^E' accept-search

zstyle ':filter-select:highlight' matched fg=green
zstyle ':filter-select' case-insensitive yes # enable case-insensitive
zstyle ':filter-select' extended-search yes # see below

# export MAKEFLAGS="-j 8"
export EDITOR="mvim -v"
export VISUAL="mvim -v"

# source /Users/rainevi/.rvm/scripts/rvm
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin
export NVM_DIR="/Users/raine/.nvm"
PATH=~/.nvm/versions/node/v7.7.0/bin:$PATH
# [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"

alias nvm-use=". ~/.nvm/nvm.sh && nvm use"
alias nvm-load=". ~/.nvm/nvm.sh"

bindkey '^P' up-history
bindkey '^N' down-history
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char
bindkey '^w' backward-kill-word
export KEYTIMEOUT=1 # vi mode esc timeout

export FZF_DEFAULT_OPTS='-x -m'
export FZF_DEFAULT_COMMAND='ag -l -g ""'
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

export ELM_HOME="/usr/local/lib/node_modules/elm/share"
alias d="docker"

PATH="/Users/raine/perl5/bin${PATH+:}${PATH}"; export PATH;
PERL5LIB="/Users/raine/perl5/lib/perl5${PERL5LIB+:}${PERL5LIB}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="/Users/raine/perl5${PERL_LOCAL_LIB_ROOT+:}${PERL_LOCAL_LIB_ROOT}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"/Users/raine/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/Users/raine/perl5"; export PERL_MM_OPT;
